function duzdm7a34_fnew(N, M)

% Set default values if not provided
if nargin < 1
    N = 170;
    M = 170;
end

% Parameters
tau = 1 / N;
h = 1 / M;
alpha = 3 / 4;
aaa = -1 / (h^2);

% Initialization of matrices
A = zeros(N + 1, N + 1, M + 1);
C = zeros(N + 1, N + 1, M + 1);
B = zeros(N + 1, N + 1, M + 1);
D = eye(N + 1, N + 1, M + 1);
F = zeros(N + 1, N + 1, M + 1);
U = zeros(N + 1, N + 1, M + 1);
ex = zeros(N + 1, M + 1);
es = zeros(N + 1, M + 1);

% Construction of matrices A, C, B, D, F
for p = 1:M + 1
    A(2, 2, p) = aaa * ((p) * h + 1);
    C(2, 2, p) = aaa * ((p - 1) * h + 1);
    
    for i = 3:N + 1
        A(i, i - 1, p) = -((p - 1) * h + 1) / (2 * (h^2)) - 1 / (4 * h);
        A(i, i, p) = -((p - 1) * h + 1) / (2 * (h^2)) - 1 / (4 * h);
        
        C(i, i - 1, p) = -((p - 1) * h + 1) / (2 * (h^2)) + 1 / (4 * h);
        C(i, i, p) = -((p - 1) * h + 1) / (2 * (h^2)) + 1 / (4 * h);
    end
end

for p = 1:M + 1
    for j = 1:N + 1
        B(2, j, p) = summa(i - 1, j - 1) - summa(i - 1, j);
    end
    
    B(2, 1, p) = -summa(i - 1, 1);
    B(2, 2, p) = 1 / ((i - 1)^(1 - alpha)) + complex(0, 1) / tau + (1 / (h^2)) * ((p - 1) * h + (p * h) + 2) + 1;
    B(2, 1, p) = B(2, 1, p) - complex(0, 1) / tau;
    
    for i = 3:N + 1
        B(i, i - 1, p) = ((p - 1) * h + 1) / (h^2) + 1 / 2 - complex(0, 1) / tau;
        B(i, i, p) = ((p - 1) * h + 1) / (h^2) + 1 / 2 + complex(0, 1) / tau;
    end
    
    B(1, 1, p) = 1;
end

for p = 1:M + 1
    F(:, 2, p) = (1 / (1 - alpha) - 1 / (2 - alpha));
    F(1, :, p) = 0;
    F(2, :, p) = 0;
    
    for i = 5:N + 1
        k = i;
        for l = k:N + 1
            F(l, k - 4, p) = F(l, k - 4, p) + a(k - 2);
            F(l, k - 3, p) = F(l, k - 3, p) + b(k - 2);
            F(l, k - 2, p) = F(l, k - 2, p) + c(k - 2);
        end
    end
    
    for i = 4:N + 1
        F(i, i - 1, p) = F(i, i - 1, p) + f(i - 1);
        F(i, i - 2, p) = F(i, i - 2, p) + e(i - 1);
        F(i, i - 3, p) = F(i, i - 3, p) + d(i - 1);
    end
end

F = F / gamma(1 - alpha);
B = B + F;

for p = 1:M + 1
    for i = 1:N + 1
        D(i, i, p) = 1;
    end
end

% Time-stepping loop
for j = 1:M + 1
    for k = 2:N + 1
        x = (j - 1) * h;
        fii(1, j:j) = 0;
        t = (k - 1) * tau - tau / 2;
        fii(k, j:j) = complex(0, 1) * (2 * t * sin(2 * pi * x) - 4 * pi * t * x) - ...
                       (t^2) * cos(2 * pi * x) * 2 * pi + 2 * (t^2) * pi + ...
                       (1 + x) * (t^2) * 4 * (pi^2) * sin(2 * pi * x) + (t^2) * sin(2 * pi * x) - ...
                       2 * (t^2) * pi * x + ((t^2) * sin(2 * pi * x) / gamma(1 - alpha)) * ...
                       (1 / (1 - alpha) - 1 / (2 - alpha)) - (2 * pi * (t^2) * x / gamma(1 - alpha)) * ...
                       (1 / (1 - alpha) - 1 / (2 - alpha));
    end
end

alpha(:, :, 2) = 0;
betha(:, 2) = 0;

% Time-stepping loop
for j = 2:M
    alpha(:, :, j + 1) = -inv(B(:, :, j:j) + C(:, :, j:j) * alpha(:, :, j)) * A(:, :, j:j);
    betha(:, j + 1) = inv(B(:, :, j:j) + C(:, :, j:j) * alpha(:, :, j)) * ...
                      (D(:, :, j:j) * fii(:, j) - C(:, :, j





